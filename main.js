!function(){var t={588:function(t,e,n){function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}var o=function(t){"use strict";var e,n=Object.prototype,o=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var o=e&&e.prototype instanceof m?e:m,i=Object.create(o.prototype),a=new j(r||[]);return i._invoke=function(t,e,n){var r=p;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===y){if("throw"===o)throw i;return R()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=L(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===p)throw r=y,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=f(t,e,n);if("normal"===c.type){if(r=n.done?y:h,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=y,n.method="throw",n.arg=c.arg)}}}(t,n,a),i}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var p="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function _(){}function b(){}var g={};s(g,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&o.call(k,a)&&(g=k);var E=b.prototype=m.prototype=Object.create(g);function S(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function n(i,a,u,c){var s=f(t[i],t,a);if("throw"!==s.type){var l=s.arg,p=l.value;return p&&"object"===r(p)&&o.call(p,"__await")?e.resolve(p.__await).then((function(t){n("next",t,u,c)}),(function(t){n("throw",t,u,c)})):e.resolve(p).then((function(t){l.value=t,u(l)}),(function(t){return n("throw",t,u,c)}))}c(s.arg)}var i;this._invoke=function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=f(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(o.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}return{next:R}}function R(){return{value:e,done:!0}}return _.prototype=b,s(E,"constructor",b),s(b,"constructor",_),_.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===_||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,s(t,c,"GeneratorFunction")),t.prototype=Object.create(E),t},t.awrap=function(t){return{__await:t}},S(x.prototype),s(x.prototype,u,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new x(l(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(E),s(E,c,"Generator"),s(E,a,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=P,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,o){return u.type="throw",u.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}("object"===r(t=n.nmd(t))?t.exports:{});try{regeneratorRuntime=o}catch(t){"object"===("undefined"==typeof globalThis?"undefined":r(globalThis))?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}},413:function(t,e,n){"use strict";t.exports=n.p+"c75819857ff1599f0c50.svg"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r](i,i.exports,n),i.loaded=!0,i.exports}n.nmd=function(t){return t.paths=[],t.children||(t.children=[]),t},n.p="",function(){"use strict";function t(t,e,n,r,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,o)}function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(588);var r=function(){function n(t,e,r,o,i,a){var u,c,s=this,l=t.name,f=t.link,p=t.owner._id,h=t._id,d=t.likes;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),c=function(){s._card.remove()},(u="_removeCard")in this?Object.defineProperty(this,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):this[u]=c,this._name=l,this._link=f,this._template=e,this._handleCardClick=r,this._handleDeleteClick=o,this._shouldHideDeleteIcon=i,this._owner=p,this._id=h,this._likes=d,this._likesHandlers=a}var r,o,i,a;return r=n,o=[{key:"_shouldShowLikes",value:function(){var t=this._card.querySelector(".card__likes-num"),e=this._card.querySelector(".card__like-button");this._likes.length>0?(t.textContent=this._likes.length,t.style.display="block"):t.style.display="none",this._likesHandlers.isUserInfoLike(this._likes)?e.classList.add("card__like-button-full"):e.classList.remove("card__like-button-full")}},{key:"_createClone",value:function(){this._card=this._template.cloneNode(!0);var t=this._card.querySelector(".card__image");return this._card.querySelector(".card__text").textContent=this._name,t.src=this._link,t.alt=this._name,this._shouldShowLikes(),this._card}},{key:"_onDeleteButtonClick",value:function(){this._handleDeleteClick(this._id,this._removeCard)}},{key:"_addDeleteButtonListener",value:function(){var t=this,e=this._card.querySelector(".card__delete-button");this._shouldHideDeleteIcon(this._owner)?e.classList.add("card__delete-button_visibility"):e.addEventListener("click",(function(){t._onDeleteButtonClick()}))}},{key:"_onLikeClick",value:(i=regeneratorRuntime.mark((function t(){var e,n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=this._card.querySelector(".card__like-button"),n={},!e.classList.contains("card__like-button-full")){t.next=8;break}return t.next=5,this._likesHandlers.delete(this._id);case 5:n=t.sent,t.next=11;break;case 8:return t.next=10,this._likesHandlers.add(this._id);case 10:n=t.sent;case 11:n&&(r=n.likes,this._likes=r,this._shouldShowLikes());case 12:case"end":return t.stop()}}),t,this)})),a=function(){var e=this,n=arguments;return new Promise((function(r,o){var a=i.apply(e,n);function u(e){t(a,r,o,u,c,"next",e)}function c(e){t(a,r,o,u,c,"throw",e)}u(void 0)}))},function(){return a.apply(this,arguments)})},{key:"_addLikeButtonListener",value:function(){var t=this;this._card.querySelector(".card__like-button").addEventListener("click",(function(){t._onLikeClick()}))}},{key:"_onCardClick",value:function(){this._handleCardClick({link:this._link,text:this._name})}},{key:"_addCardImageListener",value:function(){var t=this;this._card.querySelector(".card__image").addEventListener("click",(function(){t._onCardClick()}))}},{key:"_setEventListeners",value:function(){this._addDeleteButtonListener(),this._addLikeButtonListener(),this._addCardImageListener()}},{key:"createCard",value:function(){return this._card=this._createClone(),this._setEventListeners(),this._card}}],o&&e(r.prototype,o),n}();function o(t,e,n,r,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,o)}function i(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var a=t.apply(e,n);function u(t){o(a,r,i,u,c,"next",t)}function c(t){o(a,r,i,u,c,"throw",t)}u(void 0)}))}}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=e.baseUrl,this._token=e.token}var e,n,r,o,u,c,s,l,f,p;return e=t,n=[{key:"getToken",value:function(){return this._token}},{key:"getInitialCards",value:(p=i(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/cards"),{headers:{authorization:this._token}});case 2:if(!(e=t.sent).ok){t.next=7;break}return t.abrupt("return",e.json());case 7:console.log("Somthing went wrong",e.status,e.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(){return p.apply(this,arguments)})},{key:"getUserInfo",value:(f=i(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/users/me"),{headers:{authorization:this._token}});case 2:if(!(e=t.sent).ok){t.next=7;break}return t.abrupt("return",e.json());case 7:console.log("Somthing went wrong",e.status,e.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(){return f.apply(this,arguments)})},{key:"editUserInfo",value:(l=i(regeneratorRuntime.mark((function t(e,n){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:n})});case 2:if(!(r=t.sent).ok){t.next=7;break}return t.abrupt("return",r.json());case 7:console.log("Somthing went wrong",r.status,r.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(t,e){return l.apply(this,arguments)})},{key:"addCard",value:(s=i(regeneratorRuntime.mark((function t(e,n){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:n})});case 2:if(!(r=t.sent).ok){t.next=7;break}return t.abrupt("return",r.json());case 7:console.log("Somthing went wrong",r.status,r.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(t,e){return s.apply(this,arguments)})},{key:"deleteCard",value:(c=i(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._token}});case 2:if(!(n=t.sent).ok){t.next=7;break}return t.abrupt("return",n.ok);case 7:console.log("Somthing went wrong",n.status,n.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(t){return c.apply(this,arguments)})},{key:"editProfileImage",value:(u=i(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})});case 2:if(!(n=t.sent).ok){t.next=7;break}return t.abrupt("return",{avatar:e});case 7:console.log("Somthing went wrong",n.status,n.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(t){return u.apply(this,arguments)})},{key:"addLike",value:(o=i(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._token}});case 2:if(!(n=t.sent).ok){t.next=7;break}return t.abrupt("return",n.json());case 7:console.log("Somthing went wrong",n.status,n.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(t){return o.apply(this,arguments)})},{key:"deleteLike",value:(r=i(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(this._url,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._token}});case 2:if(!(n=t.sent).ok){t.next=7;break}return t.abrupt("return",n.json());case 7:console.log("Somthing went wrong",n.status,n.statusText);case 8:case"end":return t.stop()}}),t,this)}))),function(t){return r.apply(this,arguments)})}],n&&a(e.prototype,n),t}(),c=n(413);function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=function(){function t(e){var n,r,o=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=function(t){"Escape"===t.key&&o.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(e)}var e,n;return e=t,(n=[{key:"open",value:function(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var t=this;this._popup.addEventListener("click",(function(e){(e.target.classList.contains("popup__close-button")||e.target.classList.contains("popup"))&&t.close()}))}}])&&s(e.prototype,n),t}();function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function p(t,e){return p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},p(t,e)}function h(t,e){if(e&&("object"===f(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return d(t)}function d(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=v(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},y.apply(this,arguments)}function v(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=m(t)););return t}function m(t){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},m(t)}var _=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=m(e);if(n){var o=m(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return h(this,t)});function o(t){var e,n,i,a,u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),u=function(t){var r=t.link,i=t.text;y((e=d(n),m(o.prototype)),"open",e).call(e),n._cardImagePopup.src=r,n._cardImagePopup.alt=i,n._cardTextPopup.textContent=i},(a="open")in(i=d(n=r.call(this,t)))?Object.defineProperty(i,a,{value:u,enumerable:!0,configurable:!0,writable:!0}):i.open=u,n._cardImagePopup=n._popup.querySelector(".popup__card-image"),n._cardTextPopup=n._popup.querySelector(".popup__card-text"),n}return o}(l);function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}function g(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function w(t,e){return w=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},w(t,e)}function k(t,e){if(e&&("object"===b(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return E(t)}function E(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=x(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},S.apply(this,arguments)}function x(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=L(t)););return t}function L(t){return L=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},L(t)}var O=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&w(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=L(r);if(o){var n=L(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return k(this,t)});function a(t,e){var n,r,o,u,c;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),c=function(){r._form.querySelector(".form__button").textContent="Save",S((n=E(r),L(a.prototype)),"open",n).call(n)},(u="open")in(o=E(r=i.call(this,t)))?Object.defineProperty(o,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):o.open=c,r._formSubmitHandler=e,r._form=r._popup.querySelector(".form"),r._inputs=r._form.querySelectorAll("input"),r._formValues={},r}return e=a,(n=[{key:"_onSubmit",value:function(){var t=this._form.querySelector(".form__button");return this._getInputValues(),t.textContent="Saving...",this._formSubmitHandler(this._formValues)}},{key:"_getInputValues",value:function(){var t=this;this._inputs.forEach((function(e){return t._formValues[e.name]=e.value}))}},{key:"setInputValues",value:function(t){var e=this;t.forEach((function(t,n){e._inputs[n].value=t}))}},{key:"getForm",value:function(){return this._form}},{key:"setEventListeners",value:function(){var t=this;S(L(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(e){e.preventDefault(),t._onSubmit().then((function(){t.close()}))}))}},{key:"close",value:function(){S(L(a.prototype),"close",this).call(this),this._form.reset()}}])&&g(e.prototype,n),a}(l);function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function j(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function P(t,e){return P=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},P(t,e)}function R(t,e){if(e&&("object"===C(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return I(t)}function I(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function T(){return T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=q(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},T.apply(this,arguments)}function q(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=B(t)););return t}function B(t){return B=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},B(t)}var D=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&P(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=B(r);if(o){var n=B(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return R(this,t)});function a(t,e){var n,r,o,u,c;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),c=function(t,e){T((n=I(r),B(a.prototype)),"open",n).call(n),r._cardId=t,r._removeHandler=e},(u="open")in(o=I(r=i.call(this,t)))?Object.defineProperty(o,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):o.open=c,r._formSubmitHandler=e,r}return e=a,(n=[{key:"_onSubmit",value:function(){this._formSubmitHandler(this._cardId)&&this._removeHandler()}},{key:"setEventListeners",value:function(){var t=this;T(B(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(e){e.preventDefault(),t._onSubmit(),t.close()}))}},{key:"close",value:function(){T(B(a.prototype),"close",this).call(this)}}])&&j(e.prototype,n),a}(l);function U(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var V=function(){function t(e,n){var r=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var e,n;return e=t,(n=[{key:"setItems",value:function(t){this._items=t}},{key:"renderer",value:function(){var t=this;this._items.forEach((function(e){var n=t._renderer(e);t.addItem(n)}))}},{key:"addItem",value:function(t){this._container.append(t)}},{key:"prependItem",value:function(t){this._container.prepend(t)}}])&&U(e.prototype,n),t}();function A(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var N=function(){function t(e){var n=e.userNameSelector,r=e.userJobSelector,o=e.userAvatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userName=document.querySelector(n),this._userJob=document.querySelector(r),this._id="",this._avatar=document.querySelector(o)}var e,n;return e=t,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,about:this._userJob.textContent,id:this._id,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(t){var e=t.name,n=t.about,r=t._id,o=t.avatar;this._userName.textContent=e,this._userJob.textContent=n,this._id=r,this._avatar.src=o}},{key:"setAvatarLink",value:function(t){var e=t.avatar;this._avatar.src=e}}])&&A(e.prototype,n),t}();function H(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var F=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=n,this._inputElements=this._formElement.querySelectorAll(this._inputSelector),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var e,n;return e=t,(n=[{key:"_hideInputError",value:function(t){var e=this._formElement.querySelector("#".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}},{key:"_showInputError",value:function(t){var e=this._formElement.querySelector("#".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}},{key:"_toggleButtonState",value:function(){Array.from(this._inputElements).some((function(t){return!t.validity.valid}))?this._buttonElement.classList.add(this._inactiveButtonClass):this._buttonElement.classList.remove(this._inactiveButtonClass)}},{key:"_checkInputValidity",value:function(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}},{key:"_setEventListeners",value:function(){var t=this;this._inputElements.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState()}))}))}},{key:"resetValidation",value:function(){var t=this;this._toggleButtonState(),this._inputElements.forEach((function(e){t._hideInputError(e)}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}])&&H(e.prototype,n),t}(),z=document.getElementById("image-header-logo"),G=document.querySelector(".profile__edit-button"),J=document.querySelector(".profile__add-button"),M=document.querySelector(".profile__image-edit-button"),Y=document.querySelector("#card-template").content.querySelector(".card"),$={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"};function K(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Q(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Q(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Q(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function W(t,e,n,r,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,o)}function X(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){W(i,r,o,a,u,"next",t)}function u(t){W(i,r,o,a,u,"throw",t)}a(void 0)}))}}var Z=new _(".popup_type_card-picture"),tt=new N({userNameSelector:".profile__info-name",userJobSelector:".profile__info-about",userAvatarSelector:".profile__image"}),et=new O(".popup_type_edit-profile",(function(t){var e=t.name,n=t.about;return st.editUserInfo(e,n).then((function(t){t&&tt.setUserInfo(t)}))})),nt=new O(".popup_type_add-card",(function(t){return lt.apply(this,arguments)})),rt=new D(".popup_type_card-delete",(function(t){return pt.apply(this,arguments)})),ot=new O(".popup_type_profile-image",(function(t){return ft.apply(this,arguments)})),it=new V({items:[],renderer:dt},".cards"),at=new F($,et.getForm()),ut=new F($,ot.getForm()),ct=new F($,nt.getForm()),st=new u({baseUrl:"https://around.nomoreparties.co/v1/group-12",token:"d32f6df6-a478-44c7-98e2-39f20efb7fb4"});function lt(){return(lt=X(regeneratorRuntime.mark((function t(e){var n,r,o,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.title,r=e.link,t.next=3,st.addCard(n,r);case 3:(o=t.sent)&&(i=dt(o),it.prependItem(i));case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function ft(){return(ft=X(regeneratorRuntime.mark((function t(e){var n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.avatar,t.next=3,st.editProfileImage(n);case 3:(r=t.sent)&&tt.setAvatarLink(r);case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function pt(){return(pt=X(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,st.deleteCard(e);case 2:return n=t.sent,t.abrupt("return",n);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}z.src=c,Z.setEventListeners(),G.addEventListener("click",(function(t){var e=tt.getUserInfo(),n=e.name,r=e.about;et.setInputValues([n,r]),at.resetValidation(),et.open()})),J.addEventListener("click",(function(t){ct.resetValidation(),nt.open()})),M.addEventListener("click",(function(t){var e=tt.getUserInfo().avatar;ot.setInputValues([e]),ut.resetValidation(),ot.open()})),at.enableValidation(),ct.enableValidation(),ut.enableValidation(),et.setEventListeners(),nt.setEventListeners(),rt.setEventListeners(),ot.setEventListeners();var ht={add:st.addLike.bind(st),delete:st.deleteLike.bind(st),isUserInfoLike:function(t){var e=tt.getUserInfo().id;return t.some((function(t){return t._id===e}))}};function dt(t){return new r(t,Y,Z.open,rt.open,vt,ht).createCard()}function yt(){return(yt=X(regeneratorRuntime.mark((function t(){var e,n,r,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all([st.getInitialCards(),st.getUserInfo()]);case 2:e=t.sent,n=K(e,2),r=n[0],(o=n[1])&&r&&(tt.setUserInfo(o),it.setItems(r),it.renderer());case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function vt(t){return tt.getUserInfo().id!==t}!function(){yt.apply(this,arguments)}()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,