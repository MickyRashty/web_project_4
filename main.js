!function(){var e={588:function(e,t,r){function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}var o=function(e){"use strict";var t,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function l(e,t,r,n){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new R(n||[]);return i._invoke=function(e,t,r){var n=p;return function(o,i){if(n===d)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return P()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=L(a,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===p)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var c=f(e,t,r);if("normal"===c.type){if(n=r.done?y:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=y,r.method="throw",r.arg=c.arg)}}}(e,r,a),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var p="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function _(){}function b(){}var g={};s(g,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(j([])));k&&k!==r&&o.call(k,a)&&(g=k);var E=b.prototype=m.prototype=Object.create(g);function S(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function r(i,a,u,c){var s=f(e[i],e,a);if("throw"!==s.type){var l=s.arg,p=l.value;return p&&"object"===n(p)&&o.call(p,"__await")?t.resolve(p.__await).then((function(e){r("next",e,u,c)}),(function(e){r("throw",e,u,c)})):t.resolve(p).then((function(e){l.value=e,u(l)}),(function(e){return r("throw",e,u,c)}))}c(s.arg)}var i;this._invoke=function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}}function L(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,L(e,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=f(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function j(e){if(e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,i=function r(){for(;++n<e.length;)if(o.call(e,n))return r.value=e[n],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:P}}function P(){return{value:t,done:!0}}return _.prototype=b,s(E,"constructor",b),s(b,"constructor",_),_.displayName=s(b,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},S(x.prototype),s(x.prototype,u,(function(){return this})),e.AsyncIterator=x,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new x(l(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},S(E),s(E,c,"Generator"),s(E,a,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=j,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&o.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function n(n,o){return u.type="throw",u.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:j(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),v}},e}("object"===n(e=r.nmd(e))?e.exports:{});try{regeneratorRuntime=o}catch(e){"object"===("undefined"==typeof globalThis?"undefined":n(globalThis))?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}},413:function(e,t,r){"use strict";e.exports=r.p+"c75819857ff1599f0c50.svg"}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,loaded:!1,exports:{}};return e[n](i,i.exports,r),i.loaded=!0,i.exports}r.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},r.p="",function(){"use strict";function e(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r(588);var n=function(){function r(e,t,n,o,i,a){var u,c,s=this,l=e.name,f=e.link,p=e.owner._id,h=e._id,d=e.likes;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),c=function(){s._card.remove()},(u="_removeCard")in this?Object.defineProperty(this,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):this[u]=c,this._name=l,this._link=f,this._template=t,this._handleCardClick=n,this._handleDeleteClick=o,this._shouldHideDeleteIcon=i,this._owner=p,this._id=h,this._likes=d,this._likesHandlers=a}var n,o,i,a;return n=r,o=[{key:"_shouldShowLikes",value:function(){var e=this._card.querySelector(".card__likes-num"),t=this._card.querySelector(".card__like-button");this._likes.length>0?(e.textContent=this._likes.length,e.style.display="block"):e.style.display="none",this._likesHandlers.isUserInfoLike(this._likes)?t.classList.add("card__like-button-full"):t.classList.remove("card__like-button-full")}},{key:"_createClone",value:function(){this._card=this._template.cloneNode(!0);var e=this._card.querySelector(".card__image");return this._card.querySelector(".card__text").textContent=this._name,e.src=this._link,e.alt=this._name,this._shouldShowLikes(),this._card}},{key:"_onDeleteButtonClick",value:function(){this._handleDeleteClick(this._id,this._removeCard)}},{key:"_addDeleteButtonListener",value:function(){var e=this,t=this._card.querySelector(".card__delete-button");this._shouldHideDeleteIcon(this._owner)?t.classList.add("card__delete-button_visibility"):t.addEventListener("click",(function(){e._onDeleteButtonClick()}))}},{key:"_onLikeClick",value:(i=regeneratorRuntime.mark((function e(){var t,r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=this._card.querySelector(".card__like-button"),r={},!t.classList.contains("card__like-button-full")){e.next=8;break}return e.next=5,this._likesHandlers.delete(this._id);case 5:r=e.sent,e.next=11;break;case 8:return e.next=10,this._likesHandlers.add(this._id);case 10:r=e.sent;case 11:r&&(n=r.likes,this._likes=n,this._shouldShowLikes());case 12:case"end":return e.stop()}}),e,this)})),a=function(){var t=this,r=arguments;return new Promise((function(n,o){var a=i.apply(t,r);function u(t){e(a,n,o,u,c,"next",t)}function c(t){e(a,n,o,u,c,"throw",t)}u(void 0)}))},function(){return a.apply(this,arguments)})},{key:"_addLikeButtonListener",value:function(){var e=this;this._card.querySelector(".card__like-button").addEventListener("click",(function(){e._onLikeClick()}))}},{key:"_onCardClick",value:function(){this._handleCardClick({link:this._link,text:this._name})}},{key:"_addCardImageListener",value:function(){var e=this;this._card.querySelector(".card__image").addEventListener("click",(function(){e._onCardClick()}))}},{key:"_setEventListeners",value:function(){this._addDeleteButtonListener(),this._addLikeButtonListener(),this._addCardImageListener()}},{key:"createCard",value:function(){return this._card=this._createClone(),this._setEventListeners(),this._card}}],o&&t(n.prototype,o),r}();function o(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function i(e){return function(){var t=this,r=arguments;return new Promise((function(n,i){var a=e.apply(t,r);function u(e){o(a,n,i,u,c,"next",e)}function c(e){o(a,n,i,u,c,"throw",e)}u(void 0)}))}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.baseUrl,this._headers=t.headers}var t,r,n,o,u,c,s,l,f,p;return t=e,r=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Something went wrong: ".concat(e.status,", ").concat(e.statusText))}},{key:"getInitialCards",value:(p=i(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards"),{headers:this._headers});case 2:return t=e.sent,e.abrupt("return",this._checkResponse(t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return p.apply(this,arguments)})},{key:"getUserInfo",value:(f=i(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me"),{headers:this._headers});case 2:return t=e.sent,e.abrupt("return",this._checkResponse(t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return f.apply(this,arguments)})},{key:"editUserInfo",value:(l=i(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})});case 2:return n=e.sent,e.abrupt("return",this._checkResponse(n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return l.apply(this,arguments)})},{key:"addCard",value:(s=i(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})});case 2:return n=e.sent,e.abrupt("return",this._checkResponse(n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return s.apply(this,arguments)})},{key:"deleteCard",value:(c=i(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:this._headers});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"editProfileImage",value:(u=i(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return u.apply(this,arguments)})},{key:"addLike",value:(o=i(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"PUT",headers:this._headers});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:"deleteLike",value:(n=i(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"DELETE",headers:this._headers});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}],r&&a(t.prototype,r),e}(),c=r(413);function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){var r,n,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(e){"Escape"===e.key&&o.close()},(r="_handleEscClose")in this?Object.defineProperty(this,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[r]=n,this._popup=document.querySelector(t)}var t,r;return t=e,(r=[{key:"open",value:function(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup__close-button")||t.target.classList.contains("popup"))&&e.close()}))}}])&&s(t.prototype,r),e}();function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){return p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},p(e,t)}function h(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return d(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=v(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},y.apply(this,arguments)}function v(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(o,e);var t,r,n=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=m(t);if(r){var o=m(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return h(this,e)});function o(e){var t,r,i,a,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),u=function(e){var n=e.link,i=e.text;y((t=d(r),m(o.prototype)),"open",t).call(t),r._cardImagePopup.src=n,r._cardImagePopup.alt=i,r._cardTextPopup.textContent=i},(a="open")in(i=d(r=n.call(this,e)))?Object.defineProperty(i,a,{value:u,enumerable:!0,configurable:!0,writable:!0}):i.open=u,r._cardImagePopup=r._popup.querySelector(".popup__card-image"),r._cardTextPopup=r._popup.querySelector(".popup__card-text"),r}return o}(l);function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function g(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function w(){return w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=k(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},w.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=x(e)););return e}function E(e,t){return E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},E(e,t)}function S(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function x(e){return x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},x(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=x(n);if(o){var r=x(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return S(this,e)});function a(e,t){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._formSubmitHandler=t,r._form=r._popup.querySelector(".form"),r._inputs=r._form.querySelectorAll("input"),r._formValues={},r._formButton=r._form.querySelector(".form__button"),r}return t=a,(r=[{key:"_onSubmit",value:function(){return this._getInputValues(),this._formButton.textContent="Saving...",this._formSubmitHandler(this._formValues).catch((function(e){console.log(e)}))}},{key:"_getInputValues",value:function(){var e=this;this._inputs.forEach((function(t){return e._formValues[t.name]=t.value}))}},{key:"setInputValues",value:function(e){var t=this;e.forEach((function(e,r){t._inputs[r].value=e}))}},{key:"getForm",value:function(){return this._form}},{key:"setEventListeners",value:function(){var e=this;w(x(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._onSubmit().then((function(){e.close()})).finally((function(){e._formButton.textContent="Save"}))}))}},{key:"close",value:function(){w(x(a.prototype),"close",this).call(this),this._form.reset()}}])&&g(t.prototype,r),a}(l);function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function C(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function R(e,t){return R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},R(e,t)}function j(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return P(e)}function P(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function I(){return I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=T(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},I.apply(this,arguments)}function T(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(n);if(o){var r=q(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return j(this,e)});function a(e,t){var r,n,o,u,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),c=function(e,t){I((r=P(n),q(a.prototype)),"open",r).call(r),n._cardId=e,n._removeHandler=t},(u="open")in(o=P(n=i.call(this,e)))?Object.defineProperty(o,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):o.open=c,n._formSubmitHandler=t,n}return t=a,(r=[{key:"_onSubmit",value:function(){var e=this;return this._formSubmitHandler(this._cardId).then((function(t){t&&e._removeHandler()}))}},{key:"setEventListeners",value:function(){var e=this;I(q(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._onSubmit().then((function(){e.close()}))}))}}])&&C(t.prototype,r),a}(l);function A(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var D=function(){function e(t,r){var n=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=n,this._renderer=o,this._container=document.querySelector(r)}var t,r;return t=e,(r=[{key:"setItems",value:function(e){this._items=e}},{key:"renderer",value:function(){var e=this;this._items.forEach((function(t){e.addItem(t)}))}},{key:"addItem",value:function(e){var t=this._renderer(e);this._container.prepend(t)}},{key:"prependItem",value:function(e){this._container.prepend(e)}}])&&A(t.prototype,r),e}();function U(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var N=function(){function e(t){var r=t.userNameSelector,n=t.userJobSelector,o=t.userAvatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(r),this._userJob=document.querySelector(n),this._id="",this._avatar=document.querySelector(o)}var t,r;return t=e,(r=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,about:this._userJob.textContent,id:this._id,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(e){var t=e.name,r=e.about,n=e._id,o=e.avatar;this._userName.textContent=t,this._userJob.textContent=r,this._id=n,this._avatar.src=o}},{key:"setAvatarLink",value:function(e){var t=e.avatar;this._avatar.src=t}}])&&U(t.prototype,r),e}();function V(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var H=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=r,this._inputElements=this._formElement.querySelectorAll(this._inputSelector),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_showInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}},{key:"_toggleButtonState",value:function(){Array.from(this._inputElements).some((function(e){return!e.validity.valid}))?this._buttonElement.classList.add(this._inactiveButtonClass):this._buttonElement.classList.remove(this._inactiveButtonClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_setEventListeners",value:function(){var e=this;this._inputElements.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"resetValidation",value:function(){var e=this;this._toggleButtonState(),this._inputElements.forEach((function(t){e._hideInputError(t)}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&V(t.prototype,r),e}(),F=document.getElementById("image-header-logo"),G=document.querySelector(".profile__edit-button"),J=document.querySelector(".profile__add-button"),M=document.querySelector(".profile__image-edit-button"),Y=document.querySelector("#card-template").content.querySelector(".card");function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return $(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?$(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function K(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function Q(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){K(i,n,o,a,u,"next",e)}function u(e){K(i,n,o,a,u,"throw",e)}a(void 0)}))}}var W,X=new _(".popup_type_card-picture"),Z=new N({userNameSelector:".profile__info-name",userJobSelector:".profile__info-about",userAvatarSelector:".profile__image"}),ee=new L(".popup_type_edit-profile",(function(e){return ue.apply(this,arguments)})),te=new L(".popup_type_add-card",(function(e){return ce.apply(this,arguments)})),re=new B(".popup_type_card-delete",(function(e){return le.apply(this,arguments)})),ne=new L(".popup_type_profile-image",(function(e){return se.apply(this,arguments)})),oe=new D({items:[],renderer:function(e){return new n(e,Y,X.open,re.open,he,fe).createCard()}},".cards"),ie={},ae=new u({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"d32f6df6-a478-44c7-98e2-39f20efb7fb4","Content-Type":"application/json"}});function ue(){return(ue=Q(regeneratorRuntime.mark((function e(t){var r,n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.name,n=t.about,e.prev=1,e.next=4,ae.editUserInfo(r,n);case 4:if(!(o=e.sent)){e.next=8;break}return Z.setUserInfo(o),e.abrupt("return",o);case 8:e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),console.log(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})))).apply(this,arguments)}function ce(){return(ce=Q(regeneratorRuntime.mark((function e(t){var r,n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.title,n=t.link,e.prev=1,e.next=4,ae.addCard(r,n);case 4:(o=e.sent)&&oe.addItem(o),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),console.log(e.t0);case 11:case"end":return e.stop()}}),e,null,[[1,8]])})))).apply(this,arguments)}function se(){return(se=Q(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.avatar,e.prev=1,e.next=4,ae.editProfileImage(r);case 4:(n=e.sent)&&Z.setUserInfo(n),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),console.log(e.t0);case 11:case"end":return e.stop()}}),e,null,[[1,8]])})))).apply(this,arguments)}function le(){return(le=Q(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.abrupt("return",ae.deleteCard(t));case 4:e.prev=4,e.t0=e.catch(0),console.log(e.t0);case 7:case"end":return e.stop()}}),e,null,[[0,4]])})))).apply(this,arguments)}F.src=c,X.setEventListeners(),G.addEventListener("click",(function(e){var t=Z.getUserInfo(),r=t.name,n=t.about;ee.setInputValues([r,n]),ie[ee.getForm().getAttribute("name")].resetValidation(),ee.open()})),J.addEventListener("click",(function(e){ie[te.getForm().getAttribute("name")].resetValidation(),te.open()})),M.addEventListener("click",(function(e){Z.getUserInfo().avatar,ie[ne.getForm().getAttribute("name")].resetValidation(),ne.open()})),W={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},Array.from(document.querySelectorAll(W.formSelector)).forEach((function(e){var t=new H(W,e),r=e.getAttribute("name");ie[r]=t,t.enableValidation()})),ee.setEventListeners(),te.setEventListeners(),re.setEventListeners(),ne.setEventListeners();var fe={add:ae.addLike.bind(ae),delete:ae.deleteLike.bind(ae),isUserInfoLike:function(e){var t=Z.getUserInfo().id;return e.some((function(e){return e._id===t}))}};function pe(){return(pe=Q(regeneratorRuntime.mark((function e(){var t,r,n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Promise.all([ae.getInitialCards(),ae.getUserInfo()]);case 3:t=e.sent,r=z(t,2),n=r[0],(o=r[1])&&n&&(Z.setUserInfo(o),oe.setItems(n),oe.renderer()),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.log(e.t0);case 13:case"end":return e.stop()}}),e,null,[[0,10]])})))).apply(this,arguments)}function he(e){return Z.getUserInfo().id!==e}!function(){pe.apply(this,arguments)}()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,